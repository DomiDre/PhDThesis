import sys, os
thesisimgs = os.environ['phdthesisimgs']
cwd = sys.path[0]
import matplotlib.pyplot as plt
plt.style.use('phdthesis')

import numpy as np
import warnings
from modelexp.data import MultiData, XyemData, XyData
import matplotlib.patches as mplpatch
from PlottingTemplates.saxssanssanspol import color_variant


sample_name = 'SC-IOS-11'
Chapter = 'looselyPackedNP'
save_file = f"{Chapter}_VerticalStructure_{sample_name}_XRRDepiction.png"

circ_core_color = '#FAAB2D'
circ_shell_color = color_variant('#FAAB2D', -50)
circ_surf_color = 'white'
substrate_color = '#0EA8DF'
spacer_color = color_variant('#0EA8DF', -50)

dense_packing = np.pi / (2 * np.sqrt(3))
Rcore = 3.8
dshell = 1.6
dsurf = 1.82
Rd = Rcore + dshell + dsurf
sigR = 0#0.05445854
x = np.linspace(-10, 10)
z = np.linspace(-100, 800, 900)
#File generated by ModelExp v0.6.4
#Read datafile: ../ES-S14.xye
#Started Fit at 2018-12-20 16:37:13.527667
#Finished Fit at 2018-12-20 16:37:14.796744
#[[Fit Statistics]]
#    # fitting method   = leastsq
#    # function evals   = 243
#    # data points      = 182
#    # variables        = 17
#    chi-square         = 4.24643683
#    reduced chi-square = 0.02573598
#    Akaike info crit   = -649.942614
#    Bayesian info crit = -595.474500
#[[Variables]]
#    i0:               1 (fixed)
#    bg:               1.6e-06 (fixed)
#    roughness:        7.20000000 +/- 0.13545866 (1.88%) (init = 5.62)
#    roughnessSlope:   6.8067e-09 +/- 0.01432679 (210480770.71%) (init = 0)
#    packingDensity1:  0.53400000 +/- 0.01769705 (3.31%) (init = 0.59)
#    packingDensity2:  0.82600000 +/- 0.01248327 (1.51%) (init = 0.856)
#    packingDensity3:  0.87800000 +/- 0.00900335 (1.03%) (init = 0.886)
#    packingDensity4:  0.85400000 +/- 0.01334805 (1.56%) (init = 0.852)
#    packingDensity5:  0.81200000 +/- 0.02304914 (2.84%) (init = 0.802)
#    packingDensity6:  0.19800000 +/- 0.02777626 (14.03%) (init = 0.178)
#    layerDistance1:  -14.4617158 +/- 26328.7572 (182058.32%) (init = -14.5)
#    layerDistance2:  -37.0000000 +/- 0.69234724 (1.87%) (init = -36.2)
#    layerDistance3:  -31.8000000 +/- 0.51561522 (1.62%) (init = -31.9)
#    layerDistance4:  -34.0000000 +/- 0.32760966 (0.96%) (init = -33.8)
#    layerDistance5:  -31.0000000 +/- 0.43967946 (1.42%) (init = -30.5)
#    layerDistance6:  -27.0000000 +/- 2.46234779 (9.12%) (init = -25)
#    r:                38 (fixed)
#    dShell:           16 (fixed)
#    dSurfactant:      18.2 (fixed)
#    dSpacer:          49.1379792 +/- 26329.0576 (53581.89%) (init = 49.1)
#    reSldCore:        4.4307e-05 (fixed)
#    reSldShell:       4.0501e-05 (fixed)
#    reSldSurfactant:  8.52e-06 (fixed)
#    reSldSpacer:      3.9300e-06 +/- 2.9732e-07 (7.57%) (init = 4.02e-06)
#    reSldSubstrate:   2.0062e-05 (fixed)
#    reSldBackground:  0 (fixed)
#    imSldCore:        0 (fixed)
#    imSldShell:       0 (fixed)
#    imSldSurfactant:  0 (fixed)
#    imSldSpacer:      0 (fixed)
#    imSldSubstrate:   0 (fixed)
#    imSldBackground:  0 (fixed)
#    dTheta:           0 (fixed)
#    wavelength:       1.5418 (fixed)
#    dWavelength:      0.02230000 +/- 0.00109814 (4.92%) (init = 0.0217)
#    qShift:           0 (fixed)
d_spacer = 49.1379792/10
packing_densities = np.array([
  0.53400000,
  0.82600000,
  0.87800000,
  0.85400000,
  0.81200000,
  0.19800000])
delta_z = np.array([
  -14.4617158,
  -37.0000000,
  -31.8000000,
  -34.0000000,
  -31.0000000,
  -27.0000000])/10

h = np.sqrt(3.)*Rd
x0 = d_spacer +  Rd + delta_z[0]
x1 = x0 + h + delta_z[1]
x2 = x1 + h + delta_z[2]
x3 = x2 + h + delta_z[3]
x4 = x3 + h + delta_z[4]
x5 = x4 + h + delta_z[5]
z_0 = [x0, x1, x2, x3, x4, x5]

def plot_circle(ax, x0, y0):
  circ = mplpatch.Circle(
    (x0, y0), Rcore+dshell+dsurf,
    facecolor=circ_surf_color,
    edgecolor='black', lw=0.5, alpha=0.5)
  ax.add_artist(circ)
  circ = mplpatch.Circle(
    (x0, y0), Rcore+dshell,
    facecolor=circ_shell_color,
    edgecolor='black', lw=0.5)
  ax.add_artist(circ)
  circ = mplpatch.Circle((x0, y0), Rcore, facecolor=circ_core_color, edgecolor='None', lw=1)
  ax.add_artist(circ)

def plot_A_line(ax, h, dens):
  sqdens = np.sqrt(dens/dense_packing)
  for i in range(-10, 10):
     plot_circle(ax, i*2*Rd/sqdens, h)

def plot_B_line(ax, h, dens, shift=0):
  sqdens = np.sqrt(dens/dense_packing)
  for i in range(-10, 10):
     plot_circle(ax, (2*i+1)*Rd/sqdens + shift, h)

def plot_B_line_empty(ax, h, dens):
  plot_circle(ax, Rd/np.sqrt(dens), h)

left, bottom = 0.12, 0.15

fig = plt.figure()
ax = fig.add_axes([left,bottom, 1-left-0.01, 1-bottom-0.01])

rect = mplpatch.Rectangle((-100, -20), 200, 20, facecolor=substrate_color, edgecolor='black', lw=0.25)
ax.add_artist(rect)
rect = mplpatch.Rectangle((-100, 0), 200, d_spacer, facecolor=spacer_color, edgecolor='black', lw=0.25)
ax.add_artist(rect)
plot_A_line(ax, z_0[0], packing_densities[0])
plot_B_line(ax, z_0[1], packing_densities[1])
plot_A_line(ax, z_0[2], packing_densities[2])
plot_B_line(ax, z_0[3], packing_densities[3])
plot_A_line(ax, z_0[4], packing_densities[4])
plot_B_line(ax, z_0[5], packing_densities[5])

ax.set_xlim([-50, 50])
ax.set_ylim([-10, 99])
ax.set_xticks([-40, -20, 0, 20, 40])
ax.set_yticks([0, 20, 40, 60, 80])
ax.set_xlabel("$\mathit{x}\,/\, nm$")
ax.set_ylabel("$\mathit{z}\,/\, nm$", labelpad=0)
ax.set_aspect('equal')
ax.tick_params(axis='both', which='major')
ax.tick_params(axis='both', which='minor')

fig.savefig(thesisimgs + '/' + save_file)
fig.savefig(cwd + '/' + save_file)
